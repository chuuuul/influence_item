{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 기본 구조 및 환경 설정",
        "description": "Python 3.11 기반 프로젝트 구조 생성, 가상환경 설정, 필수 패키지 설치 및 개발 환경 구성",
        "details": "1. Python 3.11 가상환경 생성 (venv 또는 conda)\n2. 프로젝트 디렉토리 구조 생성:\n   - /src (핵심 로직)\n   - /dashboard (Streamlit 대시보드)\n   - /config (설정 파일)\n   - /data (데이터 저장)\n   - /tests (테스트 코드)\n3. requirements.txt 생성 및 패키지 설치:\n   - streamlit==1.32.0\n   - google-generativeai==0.4.1\n   - gspread==6.0.2\n   - google-auth==2.28.1\n   - playwright==1.42.0\n   - sqlite3 (내장)\n   - python-dotenv==1.0.1\n4. .env 파일 생성 및 환경변수 설정\n5. .gitignore 파일 구성",
        "testStrategy": "1. 가상환경 활성화 및 Python 버전 확인\n2. 모든 패키지 import 테스트\n3. 기본 디렉토리 구조 생성 확인\n4. 환경변수 로드 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Python 3.11 가상환경 생성 및 활성화",
            "description": "Python 3.11 버전의 가상환경을 생성하고 활성화하여 프로젝트별 독립적인 패키지 관리 환경 구축",
            "dependencies": [],
            "details": "1. Python 3.11 설치 확인 (python3.11 --version)\n2. venv 모듈을 사용하여 가상환경 생성: python3.11 -m venv venv\n3. 가상환경 활성화 스크립트 작성 (activate.sh)\n4. 가상환경 내 pip 업그레이드: pip install --upgrade pip\n5. 가상환경 정보를 README에 문서화",
            "status": "done",
            "testStrategy": "1. 가상환경 활성화 후 Python 버전 확인 (3.11.x)\n2. pip list로 초기 패키지 목록 확인\n3. 가상환경 비활성화/재활성화 테스트\n4. which python으로 경로 확인"
          },
          {
            "id": 2,
            "title": "프로젝트 디렉토리 구조 생성",
            "description": "표준화된 Python 프로젝트 디렉토리 구조를 생성하고 각 디렉토리의 역할 정의",
            "dependencies": [
              1
            ],
            "details": "1. 루트 디렉토리에 기본 폴더 생성:\n   - mkdir -p src dashboard config data tests\n2. 각 디렉토리에 __init__.py 파일 생성\n3. src/ 하위에 core/, utils/, models/ 서브디렉토리 생성\n4. config/에 settings.py 템플릿 파일 생성\n5. data/에 .gitkeep 파일 추가 (빈 폴더 유지)",
            "status": "done",
            "testStrategy": "1. tree 명령으로 전체 디렉토리 구조 확인\n2. 각 __init__.py 파일 존재 여부 검증\n3. 디렉토리 권한 확인 (읽기/쓰기 가능)\n4. .gitkeep 파일 생성 확인"
          },
          {
            "id": 3,
            "title": "requirements.txt 생성 및 핵심 패키지 설치",
            "description": "프로젝트에 필요한 모든 Python 패키지를 requirements.txt에 정의하고 설치",
            "dependencies": [
              2
            ],
            "details": "1. requirements.txt 파일 생성 및 패키지 버전 명시:\n   - streamlit==1.32.0\n   - google-generativeai==0.4.1\n   - gspread==6.0.2\n   - google-auth==2.28.1\n   - playwright==1.42.0\n   - python-dotenv==1.0.1\n   - pandas>=2.0.0\n   - numpy>=1.24.0\n2. pip install -r requirements.txt 실행\n3. playwright install 실행 (브라우저 설치)\n4. requirements-dev.txt 생성 (개발용 패키지)",
            "status": "done",
            "testStrategy": "1. pip freeze로 설치된 패키지 버전 확인\n2. 각 패키지 import 테스트 스크립트 작성 및 실행\n3. playwright 브라우저 설치 확인\n4. 패키지 간 의존성 충돌 확인"
          },
          {
            "id": 4,
            "title": "환경변수 설정 및 .env 파일 구성",
            "description": ".env 파일을 생성하여 민감한 정보와 설정값을 관리하고 python-dotenv로 로드",
            "dependencies": [
              3
            ],
            "details": "1. .env.example 템플릿 파일 생성:\n   - GOOGLE_API_KEY=your_google_api_key\n   - GEMINI_API_KEY=your_gemini_api_key\n   - GOOGLE_SHEETS_CREDENTIALS_PATH=path/to/credentials.json\n   - DATABASE_PATH=data/influence_item.db\n   - LOG_LEVEL=INFO\n2. 실제 .env 파일 생성 (값은 비어있음)\n3. config/settings.py에 환경변수 로드 로직 구현\n4. 환경변수 검증 함수 작성",
            "status": "done",
            "testStrategy": "1. python-dotenv로 환경변수 로드 테스트\n2. 필수 환경변수 누락 시 에러 처리 확인\n3. 환경변수 타입 변환 테스트 (문자열->숫자 등)\n4. .env.example과 실제 사용 변수 일치 확인"
          },
          {
            "id": 5,
            "title": ".gitignore 파일 구성 및 Git 초기화",
            "description": "Python 프로젝트에 적합한 .gitignore 파일을 생성하고 Git 저장소 초기화",
            "dependencies": [
              4
            ],
            "details": "1. Python 표준 .gitignore 템플릿 적용:\n   - __pycache__/\n   - *.pyc\n   - venv/\n   - .env\n   - *.log\n   - data/*.db\n   - credentials.json\n2. 프로젝트 특화 제외 항목 추가\n3. git init 실행\n4. 초기 커밋 생성 (Initial commit)\n5. pre-commit 훅 설정 (선택사항)",
            "status": "done",
            "testStrategy": "1. git status로 추적되지 않는 파일 확인\n2. .env 파일이 git에 포함되지 않는지 검증\n3. Python 캐시 파일들이 제외되는지 확인\n4. git log로 초기 커밋 확인"
          }
        ]
      },
      {
        "id": 2,
        "title": "SQLite 데이터베이스 스키마 설계 및 구현",
        "description": "연예인 채널, 영상, 제품 후보 정보를 저장할 SQLite 데이터베이스 설계 및 ORM 매핑",
        "details": "1. SQLite 데이터베이스 파일 생성 (influence_item.db)\n2. 테이블 스키마 설계:\n   - channels: 채널 정보 (id, name, handle, type, celebrity_name, status)\n   - videos: 영상 정보 (id, channel_id, title, url, upload_date, analysis_status)\n   - candidates: 제품 후보 (id, video_id, product_name, clip_start, clip_end, total_score, status)\n   - analysis_logs: 분석 로그 (id, video_id, analysis_type, timestamp, result)\n3. SQLAlchemy 또는 sqlite3 직접 사용하여 테이블 생성\n4. 인덱스 생성 (channel_id, video_id, status, upload_date)\n5. 데이터베이스 연결 매니저 클래스 구현",
        "testStrategy": "1. 데이터베이스 파일 생성 확인\n2. 모든 테이블 생성 및 스키마 검증\n3. CRUD 작업 테스트 (Create, Read, Update, Delete)\n4. 인덱스 성능 테스트\n5. 동시성 처리 테스트",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "SQLite 데이터베이스 파일 생성 및 기본 설정",
            "description": "influence_item.db 파일 생성 및 SQLAlchemy 엔진 설정",
            "dependencies": [],
            "details": "1. SQLAlchemy 엔진 생성 (create_engine)\n2. 데이터베이스 파일 경로 설정 (data/influence_item.db)\n3. 연결 풀 설정 (pool_size=5, max_overflow=10)\n4. WAL 모드 활성화 (pragma journal_mode=WAL)\n5. 외래키 제약 조건 활성화 (pragma foreign_keys=ON)",
            "status": "done",
            "testStrategy": "1. 데이터베이스 파일 생성 확인\n2. 연결 테스트 및 pragma 설정 검증\n3. 동시 연결 처리 테스트"
          },
          {
            "id": 2,
            "title": "SQLAlchemy ORM 모델 클래스 정의",
            "description": "channels, videos, candidates, analysis_logs 테이블에 대한 ORM 모델 구현",
            "dependencies": [
              1
            ],
            "details": "1. Base 클래스 정의 (declarative_base)\n2. Channel 모델: id(PK), name, handle, type(enum), celebrity_name, status, created_at, updated_at\n3. Video 모델: id(PK), channel_id(FK), title, url, upload_date, analysis_status(enum), created_at\n4. Candidate 모델: id(PK), video_id(FK), product_name, clip_start, clip_end, total_score, status(enum), created_at\n5. AnalysisLog 모델: id(PK), video_id(FK), analysis_type, timestamp, result(JSON), error_message",
            "status": "done",
            "testStrategy": "1. 모델 임포트 및 속성 검증\n2. 관계 설정 확인 (relationship, backref)\n3. 열거형(Enum) 타입 검증"
          },
          {
            "id": 3,
            "title": "데이터베이스 테이블 생성 및 인덱스 설정",
            "description": "정의된 ORM 모델을 기반으로 실제 테이블과 인덱스 생성",
            "dependencies": [
              2
            ],
            "details": "1. metadata.create_all() 실행하여 테이블 생성\n2. 복합 인덱스 생성:\n   - idx_channel_status: (channel_id, status)\n   - idx_video_upload: (upload_date, analysis_status)\n   - idx_video_channel: (channel_id, upload_date)\n3. 단일 인덱스 생성:\n   - idx_candidate_video: video_id\n   - idx_analysis_video: video_id\n4. 유니크 제약 조건: channels.handle\n5. CHECK 제약 조건: total_score >= 0 AND total_score <= 100",
            "status": "done",
            "testStrategy": "1. 테이블 존재 여부 확인 (sqlite_master 쿼리)\n2. 인덱스 생성 확인\n3. 제약 조건 위반 테스트"
          },
          {
            "id": 4,
            "title": "데이터베이스 연결 매니저 클래스 구현",
            "description": "데이터베이스 연결 관리, 세션 처리, 트랜잭션 관리를 위한 매니저 클래스 개발",
            "dependencies": [
              3
            ],
            "details": "1. DatabaseManager 클래스 구현:\n   - __init__: 엔진 및 세션 팩토리 초기화\n   - get_session(): 컨텍스트 매니저로 세션 제공\n   - execute_query(): 직접 SQL 실행 메서드\n2. 트랜잭션 데코레이터 구현:\n   - @transactional: 자동 커밋/롤백\n3. 연결 재시도 로직:\n   - 최대 3회 재시도\n   - 지수 백오프 적용\n4. 연결 풀 모니터링 메서드\n5. 데이터베이스 백업 메서드",
            "status": "done",
            "testStrategy": "1. 세션 생성 및 종료 테스트\n2. 트랜잭션 롤백 시나리오\n3. 동시 세션 처리 테스트\n4. 연결 재시도 동작 확인"
          },
          {
            "id": 5,
            "title": "CRUD 작업 레포지토리 패턴 구현 및 테스트",
            "description": "각 모델에 대한 CRUD 작업을 처리하는 레포지토리 클래스 구현",
            "dependencies": [
              4
            ],
            "details": "1. BaseRepository 추상 클래스 정의:\n   - create(), get(), update(), delete(), list()\n2. ChannelRepository 구현:\n   - get_by_handle(), get_active_channels()\n3. VideoRepository 구현:\n   - get_unanalyzed_videos(), get_by_channel()\n4. CandidateRepository 구현:\n   - get_top_candidates(), update_status_bulk()\n5. AnalysisLogRepository 구현:\n   - get_recent_logs(), cleanup_old_logs()",
            "status": "done",
            "testStrategy": "1. 각 CRUD 메서드 단위 테스트\n2. 페이지네이션 동작 검증\n3. 필터링 및 정렬 테스트\n4. 벌크 작업 성능 측정\n5. 트랜잭션 경계 테스트"
          }
        ]
      },
      {
        "id": 3,
        "title": "Google Sheets 연동 및 채널 목록 관리",
        "description": "Google Sheets API를 통한 채널 목록 읽기/쓰기 기능 구현 및 동기화",
        "details": "1. Google Cloud Console에서 프로젝트 생성 및 Sheets API 활성화\n2. 서비스 계정 생성 및 인증 키 다운로드\n3. gspread 라이브러리 설정:\n   - credentials.json 파일 관리\n   - OAuth2 인증 구현\n4. 채널 관리 클래스 구현:\n   - read_channels(): 시트에서 채널 목록 읽기\n   - add_channel(): 새 채널 추가\n   - update_channel_status(): 채널 상태 업데이트\n   - sync_to_database(): 로컬 DB와 동기화\n5. 시트 구조: [채널명, 핸들, 유형, 연예인이름, 상태, 추가일자]",
        "testStrategy": "1. Google Sheets API 연결 테스트\n2. 읽기/쓰기 권한 검증\n3. 대량 데이터 처리 성능 테스트\n4. 동기화 충돌 해결 테스트\n5. 네트워크 오류 처리 테스트",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "YouTube RSS 피드 수집 모듈 구현",
        "description": "채널별 RSS 피드를 통한 신규 영상 자동 수집 및 필터링 시스템 구축",
        "details": "1. feedparser 라이브러리 설치 (pip install feedparser==6.0.11)\n2. RSS 피드 URL 생성기:\n   - 채널 ID 기반: https://www.youtube.com/feeds/videos.xml?channel_id={channel_id}\n3. RSS 수집 클래스 구현:\n   - fetch_channel_feed(): 채널별 RSS 피드 파싱\n   - filter_new_videos(): 이미 분석한 영상 제외\n   - filter_shorts(): YouTube Shorts 제외 (duration < 60초)\n   - filter_celebrity_videos(): 미디어 채널의 경우 제목에 연예인 이름 포함 확인\n4. 배치 처리 구현 (동시 요청 수 제한)\n5. 수집된 영상 정보 DB 저장",
        "testStrategy": "1. 다양한 채널 RSS 피드 파싱 테스트\n2. 잘못된 채널 ID 처리 테스트\n3. 대량 채널 동시 처리 성능 테스트\n4. 필터링 로직 정확성 검증\n5. 중복 영상 방지 테스트",
        "priority": "medium",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Playwright 기반 YouTube 영상 스크래핑 모듈",
        "description": "과거 영상 수집을 위한 웹 스크래핑 모듈 구현 (관리자 지정 기간)",
        "details": "1. Playwright 브라우저 초기화:\n   - headless 모드 설정\n   - User-Agent 설정\n2. YouTube 채널 페이지 스크래핑:\n   - 채널 Videos 탭 접근\n   - 무한 스크롤 처리 (지정 기간까지)\n   - 영상 메타데이터 추출 (제목, URL, 업로드 날짜, 썸네일)\n3. 안티봇 대응:\n   - 요청 간 랜덤 딜레이\n   - 브라우저 핑거프린트 회피\n4. 에러 처리 및 재시도 로직\n5. 수집 진행률 추적 및 로깅",
        "testStrategy": "1. 다양한 채널 구조 대응 테스트\n2. 날짜 기반 필터링 정확성 검증\n3. 대량 스크래핑 안정성 테스트\n4. Rate limiting 대응 테스트\n5. 메모리 누수 모니터링",
        "priority": "medium",
        "dependencies": [
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "OpenAI Whisper 음성 인식 통합",
        "description": "Whisper small 모델을 사용한 영상 전체 음성 추출 및 타임스탬프 동기화",
        "details": "1. whisper 라이브러리 설치: pip install openai-whisper==20231117\n2. yt-dlp를 통한 오디오 추출:\n   - 오디오만 다운로드 (m4a/webm)\n   - 임시 파일 관리\n3. Whisper 모델 로드 및 설정:\n   - model = whisper.load_model('small')\n   - 한국어 우선 설정\n4. 전사 구현:\n   - result = model.transcribe(audio_file, language='ko')\n   - 타임스탬프 포함 세그먼트 추출\n5. 결과 포맷팅:\n   - [{\"start\": 0.0, \"end\": 2.5, \"text\": \"안녕하세요\"}, ...]",
        "testStrategy": "1. 다양한 오디오 포맷 처리 테스트\n2. 한국어/영어 혼용 음성 인식 정확도\n3. 긴 영상(1시간+) 처리 성능 테스트\n4. GPU/CPU 모드 성능 비교\n5. 메모리 사용량 모니터링",
        "priority": "high",
        "dependencies": [
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Gemini 2.5 Flash 1차 분석 시스템",
        "description": "전체 스크립트에서 제품 추천 후보 시간대를 탐색하는 AI 분석 엔진 구현",
        "details": "1. Gemini API 클라이언트 초기화:\n   - genai.configure(api_key=GEMINI_API_KEY)\n   - model = genai.GenerativeModel('gemini-2.0-flash-exp')\n2. 프롬프트 템플릿 관리 시스템:\n   - PRD의 1차 분석 프롬프트 정확히 구현\n   - 동적 변수 삽입 (스크립트, 영상 정보)\n3. 배치 처리 최적화:\n   - 긴 스크립트 청킹 (토큰 제한 대응)\n   - 동시 요청 수 제한 (Rate limit)\n4. 응답 파싱 및 검증:\n   - JSON 형식 검증\n   - 타임스탬프 유효성 확인\n5. 에러 처리 및 폴백 전략",
        "testStrategy": "1. 다양한 추천 패턴 인식 테스트\n2. 긴 스크립트 처리 안정성\n3. API 응답 일관성 검증\n4. Rate limit 처리 테스트\n5. 프롬프트 인젝션 방어 테스트",
        "priority": "high",
        "dependencies": [
          6
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "시각 분석 모듈 구현 (OCR + 객체 인식)",
        "description": "후보 시간대의 프레임 추출 및 OCR/객체 인식을 통한 시각 정보 분석",
        "details": "1. OpenCV 기반 프레임 추출:\n   - pip install opencv-python==4.9.0.80\n   - 후보 시간대별 주요 프레임 샘플링 (1초당 2프레임)\n2. EasyOCR 통합:\n   - pip install easyocr==1.7.0\n   - reader = easyocr.Reader(['ko', 'en'])\n   - 텍스트 및 바운딩 박스 추출\n3. YOLOv8 객체 인식:\n   - pip install ultralytics==8.1.0\n   - 제품 관련 객체 클래스 필터링\n4. 시각 정보 구조화:\n   - OCR 결과 + 위치 정보\n   - 인식된 객체 목록 + 신뢰도\n5. GPU 최적화 (CUDA 사용 시)",
        "testStrategy": "1. 다양한 화질의 영상 처리 테스트\n2. 한글/영문 텍스트 인식률 측정\n3. 제품 객체 인식 정확도 검증\n4. 처리 속도 벤치마크\n5. 메모리 효율성 테스트",
        "priority": "medium",
        "dependencies": [
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Gemini 2차 종합 분석 및 콘텐츠 생성",
        "description": "음성+시각 정보를 종합하여 최종 제품 정보 추출 및 릴스 콘텐츠 패키지 생성",
        "details": "1. 2차 분석 프롬프트 구현:\n   - PRD의 2차 분석 프롬프트 정확히 적용\n   - 음성+시각 데이터 통합 포맷팅\n2. 멀티모달 데이터 전처리:\n   - 이미지 인코딩 (base64)\n   - 텍스트 데이터 정규화\n3. Gemini API 호출 최적화:\n   - 컨텍스트 윈도우 효율적 활용\n   - 응답 캐싱 전략\n4. 결과 검증 및 후처리:\n   - 필수 필드 존재 확인\n   - 데이터 타입 검증\n   - 점수 계산 로직 구현\n5. PPL 필터링 로직 구현",
        "testStrategy": "1. 다양한 제품 유형별 추출 정확도\n2. 콘텐츠 품질 평가 (훅 문장, 캡션)\n3. PPL 탐지 정확도 측정\n4. 점수 계산 일관성 검증\n5. 엣지 케이스 처리 테스트",
        "priority": "high",
        "dependencies": [
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "쿠팡 파트너스 API 연동 및 수익화 검증",
        "description": "추출된 제품명으로 쿠팡 제품 검색 및 제휴 링크 생성 자동화",
        "details": "1. 쿠팡 파트너스 API 설정:\n   - ACCESS_KEY, SECRET_KEY 환경변수 설정\n   - HMAC 인증 구현\n2. 제품 검색 API 구현:\n   - /v2/providers/affiliate_open_api/apis/openapi/v1/products/search\n   - 검색어 최적화 (브랜드명 + 제품명)\n3. 검색 결과 매칭 로직:\n   - 제품명 유사도 계산\n   - 카테고리 매칭 검증\n   - 가격대 필터링\n4. 제휴 링크 생성:\n   - 딥링크 URL 생성\n   - 트래킹 파라미터 추가\n5. 캐싱 전략 (동일 제품 재검색 방지)",
        "testStrategy": "1. 다양한 제품명 검색 정확도\n2. API Rate limit 처리 테스트\n3. 잘못된 매칭 방지 검증\n4. 링크 유효성 확인\n5. 캐시 히트율 측정",
        "priority": "medium",
        "dependencies": [
          9
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "매력도 스코어링 알고리즘 구현",
        "description": "감성 강도, 실사용 인증, 인플루언서 신뢰도 기반 종합 점수 계산 시스템",
        "details": "1. 점수 계산 컴포넌트 구현:\n   - sentiment_score: 감성 표현 강도 (0-1)\n   - endorsement_score: 실사용 언급 정도 (0-1)\n   - influencer_score: 채널 신뢰도 (구독자수 기반)\n2. 가중치 적용 공식:\n   - total = 0.50 * sentiment + 0.35 * endorsement + 0.15 * influencer\n3. 세부 점수 산출 로직:\n   - 감성: 긍정 형용사 빈도, 감탄사 사용\n   - 실사용: \"매일\", \"항상\" 등 습관 키워드\n   - 신뢰도: 구독자 수 로그 스케일\n4. 점수 정규화 (0-100)\n5. 점수별 등급 분류 (S/A/B/C)",
        "testStrategy": "1. 수동 레이블링 데이터와 비교\n2. 점수 분포 분석\n3. 가중치 민감도 테스트\n4. 극단값 처리 검증\n5. A/B 테스트 준비",
        "priority": "medium",
        "dependencies": [
          10
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Streamlit 관리 대시보드 UI 구현",
        "description": "Master-Detail 구조의 후보 관리 대시보드 개발 (정렬, 필터링, 상세보기)",
        "details": "1. Streamlit 페이지 구조:\n   - st.set_page_config(layout='wide')\n   - 사이드바: 필터 옵션\n   - 메인: 데이터 테이블\n2. 데이터 테이블 구현:\n   - st.dataframe() 커스터마이징\n   - 컬럼별 정렬 기능\n   - 검색/필터 위젯\n3. 탭 구조:\n   - Tab1: 수익화 가능 후보\n   - Tab2: 수익화 필터링 목록\n   - Tab3: PPL 의심 목록\n4. 상세보기 모달:\n   - st.expander() 활용\n   - 영상 임베드 (iframe)\n5. 반응형 레이아웃 최적화",
        "testStrategy": "1. 대량 데이터 렌더링 성능\n2. 필터/정렬 기능 정확성\n3. 세션 상태 관리 테스트\n4. 브라우저 호환성 확인\n5. UX 사용성 테스트",
        "priority": "high",
        "dependencies": [
          11
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "대시보드 상세 기능 및 워크플로우 구현",
        "description": "영상 재생, AI 콘텐츠 표시, 상태 관리, 수동 보정 등 핵심 기능 개발",
        "details": "1. 타임스탬프 자동 재생:\n   - YouTube embed URL + 시작 시간 파라미터\n   - iframe 동적 생성\n2. AI 생성 콘텐츠 UI:\n   - 추천 제목 목록 (복사 버튼)\n   - 해시태그 (클릭하여 복사)\n   - 캡션 텍스트 에디터\n3. 제품 검증 도구:\n   - 자동 캡처 이미지 표시\n   - Google/네이버 검색 링크 생성\n4. 상태 워크플로우:\n   - 상태 버튼 그룹 (승인/반려/수정/완료)\n   - 상태 변경 시 DB 업데이트\n   - 수동 링크 입력 폼\n5. 데이터 수정 기능:\n   - 인라인 편집\n   - 변경 이력 추적",
        "testStrategy": "1. 영상 재생 안정성 테스트\n2. 복사 기능 크로스 브라우저 테스트\n3. 상태 전환 무결성 검증\n4. 동시 사용자 처리 테스트\n5. 데이터 일관성 검증",
        "priority": "high",
        "dependencies": [
          12
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "n8n 워크플로우 통합 및 자동화",
        "description": "클라우드 배포를 위한 n8n 워크플로우 설계 및 API 엔드포인트 구현",
        "details": "1. FastAPI 서버 구현:\n   - pip install fastapi==0.110.0 uvicorn==0.27.0\n   - REST API 엔드포인트 설계\n2. API 엔드포인트:\n   - POST /analyze/video: 영상 분석 트리거\n   - GET /analysis/status/{id}: 분석 상태 확인\n   - POST /webhook/complete: 완료 알림\n3. n8n 워크플로우 템플릿:\n   - Cron 노드: 매일 아침 7시\n   - Google Sheets 노드: 채널 목록 읽기\n   - HTTP Request: API 호출\n   - Slack 노드: 알림 전송\n4. 비동기 처리:\n   - Celery 또는 BackgroundTasks 활용\n5. 워크플로우 JSON 익스포트",
        "testStrategy": "1. API 엔드포인트 통합 테스트\n2. n8n 연동 시뮬레이션\n3. 웹훅 신뢰성 테스트\n4. 에러 처리 시나리오\n5. 부하 테스트",
        "priority": "medium",
        "dependencies": [
          13
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "모니터링, 로깅 및 배포 준비",
        "description": "시스템 모니터링, 에러 추적, 성능 최적화 및 프로덕션 배포 준비",
        "details": "1. 로깅 시스템 구현:\n   - Python logging 모듈 설정\n   - 로그 레벨별 파일 분리\n   - 로그 로테이션 설정\n2. 모니터링 대시보드:\n   - 일일 처리량 통계\n   - API 사용량 추적\n   - 에러율 모니터링\n3. 성능 최적화:\n   - 데이터베이스 쿼리 최적화\n   - 캐싱 전략 구현\n   - 비동기 처리 개선\n4. 배포 준비:\n   - Docker 컨테이너화\n   - 환경별 설정 분리\n   - CI/CD 파이프라인\n5. 문서화:\n   - API 문서 (Swagger)\n   - 운영 가이드\n   - 트러블슈팅 가이드",
        "testStrategy": "1. 로그 수집 및 분석 테스트\n2. 알림 시스템 작동 확인\n3. 성능 벤치마크 측정\n4. 컨테이너 빌드 및 실행 테스트\n5. 문서 완성도 검토",
        "priority": "medium",
        "dependencies": [
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-15T14:01:04.046Z",
      "updated": "2025-07-15T15:07:03.394Z",
      "description": "Tasks for master context"
    }
  }
}