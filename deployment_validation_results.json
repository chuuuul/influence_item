{
  "docker_compose_files": {
    "docker-compose.yml": {
      "file": "docker-compose.yml",
      "status": "valid",
      "services": {
        "gpu-server": {
          "name": "gpu-server",
          "status": "valid",
          "has_build": true,
          "has_image": false,
          "ports": [
            "8001:8001"
          ],
          "volumes": [
            "./temp:/app/temp",
            "./yolo11n.pt:/app/yolo11n.pt:ro"
          ],
          "environment": [
            "CUDA_VISIBLE_DEVICES=0",
            "PYTHONPATH=/app"
          ],
          "errors": [],
          "warnings": [],
          "build": {
            "context": ".",
            "dockerfile": "Dockerfile.gpu"
          },
          "has_healthcheck": true,
          "restart_policy": "unless-stopped"
        },
        "cpu-server": {
          "name": "cpu-server",
          "status": "valid",
          "has_build": true,
          "has_image": false,
          "ports": [
            "8501:8501"
          ],
          "volumes": [
            "./influence_item.db:/app/influence_item.db",
            "./temp:/app/temp",
            "./screenshots:/app/screenshots"
          ],
          "environment": [
            "PYTHONPATH=/app",
            "STREAMLIT_SERVER_PORT=8501",
            "STREAMLIT_SERVER_ADDRESS=0.0.0.0",
            "GPU_SERVER_URL=http://gpu-server:8001"
          ],
          "errors": [],
          "warnings": [],
          "build": {
            "context": ".",
            "dockerfile": "Dockerfile.cpu"
          },
          "has_healthcheck": true,
          "restart_policy": "unless-stopped"
        },
        "nginx": {
          "name": "nginx",
          "status": "warning",
          "has_build": false,
          "has_image": true,
          "ports": [
            "80:80",
            "443:443"
          ],
          "volumes": [
            "./nginx.conf:/etc/nginx/nginx.conf:ro",
            "./ssl:/etc/nginx/ssl:ro"
          ],
          "environment": {},
          "errors": [],
          "warnings": [
            "헬스체크 설정이 없습니다"
          ],
          "image": "nginx:alpine",
          "restart_policy": "unless-stopped"
        }
      },
      "networks": {
        "influence_network": {
          "driver": "bridge"
        }
      },
      "volumes": {
        "gpu_cache": {
          "driver": "local"
        }
      },
      "errors": [],
      "warnings": [],
      "version": "3.8"
    },
    "docker-compose.simple.yml": {
      "file": "docker-compose.simple.yml",
      "status": "valid",
      "services": {
        "n8n": {
          "name": "n8n",
          "status": "valid",
          "has_build": false,
          "has_image": true,
          "ports": [
            "5678:5678"
          ],
          "volumes": [
            "n8n_data:/home/node/.n8n",
            "./n8n-workflows:/workflows"
          ],
          "environment": [
            "DB_TYPE=sqlite",
            "N8N_LOG_LEVEL=info",
            "GENERIC_TIMEZONE=Asia/Seoul",
            "N8N_USER_MANAGEMENT_DISABLED=true",
            "N8N_TEMPLATES_ENABLED=false",
            "N8N_VERSION_NOTIFICATIONS_ENABLED=false",
            "N8N_ONBOARDING_FLOW_DISABLED=true",
            "N8N_BASIC_AUTH_ACTIVE=false"
          ],
          "errors": [],
          "warnings": [],
          "image": "docker.n8n.io/n8nio/n8n:latest",
          "has_healthcheck": true,
          "restart_policy": "always"
        }
      },
      "networks": {},
      "volumes": {
        "n8n_data": {
          "driver": "local"
        }
      },
      "errors": [],
      "warnings": [],
      "version": "3.8"
    },
    "docker-compose.n8n.yml": {
      "file": "docker-compose.n8n.yml",
      "status": "valid",
      "services": {
        "traefik": {
          "name": "traefik",
          "status": "warning",
          "has_build": false,
          "has_image": true,
          "ports": [
            "80:80",
            "443:443"
          ],
          "volumes": [
            "traefik_data:/letsencrypt",
            "/var/run/docker.sock:/var/run/docker.sock:ro"
          ],
          "environment": {},
          "errors": [],
          "warnings": [
            "헬스체크 설정이 없습니다"
          ],
          "image": "traefik:v2.10",
          "restart_policy": "always"
        },
        "n8n": {
          "name": "n8n",
          "status": "valid",
          "has_build": false,
          "has_image": true,
          "ports": [],
          "volumes": [
            "n8n_data:/home/node/.n8n",
            "./n8n-local-files:/files",
            "./n8n-workflows:/workflows"
          ],
          "environment": [
            "N8N_HOST=${N8N_SUBDOMAIN}.${DOMAIN_NAME}",
            "N8N_PORT=5678",
            "N8N_PROTOCOL=https",
            "NODE_ENV=production",
            "WEBHOOK_URL=https://${N8N_SUBDOMAIN}.${DOMAIN_NAME}/",
            "GENERIC_TIMEZONE=${GENERIC_TIMEZONE}",
            "N8N_LOG_LEVEL=info",
            "N8N_LOG_OUTPUT=console",
            "DB_TYPE=sqlite",
            "DB_SQLITE_DATABASE=/home/node/.n8n/database.sqlite",
            "N8N_BASIC_AUTH_ACTIVE=true",
            "N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}",
            "N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}",
            "N8N_METRICS=true",
            "N8N_DIAGNOSTICS_ENABLED=true",
            "EXECUTIONS_TIMEOUT=${EXECUTIONS_TIMEOUT:-3600}",
            "EXECUTIONS_TIMEOUT_MAX=${EXECUTIONS_TIMEOUT_MAX:-7200}",
            "N8N_PAYLOAD_SIZE_MAX=16",
            "N8N_USER_MANAGEMENT_DISABLED=false",
            "N8N_EMAIL_MODE=smtp",
            "N8N_SMTP_HOST=${SMTP_HOST}",
            "N8N_SMTP_PORT=${SMTP_PORT}",
            "N8N_SMTP_USER=${SMTP_USER}",
            "N8N_SMTP_PASS=${SMTP_PASS}",
            "N8N_SMTP_SENDER=${SMTP_SENDER}",
            "N8N_DEFAULT_BINARY_DATA_MODE=filesystem",
            "N8N_PERSISTED_BINARY_DATA_TTL=1440"
          ],
          "errors": [],
          "warnings": [],
          "image": "docker.n8n.io/n8nio/n8n:latest",
          "has_healthcheck": true,
          "restart_policy": "always"
        },
        "n8n-backup": {
          "name": "n8n-backup",
          "status": "warning",
          "has_build": false,
          "has_image": true,
          "ports": [],
          "volumes": [
            "n8n_data:/source:ro",
            "./backups:/backup"
          ],
          "environment": {},
          "errors": [],
          "warnings": [
            "헬스체크 설정이 없습니다"
          ],
          "image": "alpine:latest",
          "restart_policy": "no"
        }
      },
      "networks": {
        "n8n_network": {
          "driver": "bridge"
        }
      },
      "volumes": {
        "n8n_data": {
          "driver": "local"
        },
        "traefik_data": {
          "driver": "local"
        }
      },
      "errors": [],
      "warnings": [],
      "version": "3.8"
    }
  },
  "dockerfile_configs": {
    "Dockerfile.cpu": {
      "file": "Dockerfile.cpu",
      "status": "valid",
      "base_image": "python:3.11-slim",
      "python_version": null,
      "working_directory": "/app",
      "exposed_ports": [
        "8501"
      ],
      "commands": [
        {
          "line": 2,
          "command": "FROM python:3.11-slim"
        },
        {
          "line": 5,
          "command": "RUN apt-get update && apt-get install -y \\"
        },
        {
          "line": 6,
          "command": "curl \\"
        },
        {
          "line": 7,
          "command": "&& rm -rf /var/lib/apt/lists/*"
        },
        {
          "line": 10,
          "command": "WORKDIR /app"
        },
        {
          "line": 13,
          "command": "COPY requirements-cpu.txt ."
        },
        {
          "line": 14,
          "command": "RUN pip install --no-cache-dir -r requirements-cpu.txt"
        },
        {
          "line": 17,
          "command": "RUN playwright install chromium"
        },
        {
          "line": 18,
          "command": "RUN playwright install-deps"
        },
        {
          "line": 21,
          "command": "COPY dashboard/ ./dashboard/"
        },
        {
          "line": 22,
          "command": "COPY src/ ./src/"
        },
        {
          "line": 23,
          "command": "COPY config/ ./config/"
        },
        {
          "line": 24,
          "command": "COPY run_dashboard.py ."
        },
        {
          "line": 27,
          "command": "ENV PYTHONPATH=/app"
        },
        {
          "line": 28,
          "command": "ENV STREAMLIT_SERVER_PORT=8501"
        },
        {
          "line": 29,
          "command": "ENV STREAMLIT_SERVER_ADDRESS=0.0.0.0"
        },
        {
          "line": 32,
          "command": "EXPOSE 8501"
        },
        {
          "line": 35,
          "command": "HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \\"
        },
        {
          "line": 36,
          "command": "CMD curl -f http://localhost:8501/_stcore/health || exit 1"
        },
        {
          "line": 39,
          "command": "CMD [\"streamlit\", \"run\", \"dashboard/main_dashboard.py\", \"--server.port=8501\", \"--server.address=0.0.0.0\"]"
        }
      ],
      "errors": [],
      "warnings": []
    },
    "Dockerfile.gpu": {
      "file": "Dockerfile.gpu",
      "status": "valid",
      "base_image": "nvidia/cuda:12.0-devel-ubuntu22.04",
      "python_version": null,
      "working_directory": "/app",
      "exposed_ports": [
        "8001"
      ],
      "commands": [
        {
          "line": 2,
          "command": "FROM nvidia/cuda:12.0-devel-ubuntu22.04"
        },
        {
          "line": 5,
          "command": "RUN apt-get update && apt-get install -y \\"
        },
        {
          "line": 6,
          "command": "python3 \\"
        },
        {
          "line": 7,
          "command": "python3-pip \\"
        },
        {
          "line": 8,
          "command": "python3-dev \\"
        },
        {
          "line": 9,
          "command": "ffmpeg \\"
        },
        {
          "line": 10,
          "command": "libsm6 \\"
        },
        {
          "line": 11,
          "command": "libxext6 \\"
        },
        {
          "line": 12,
          "command": "libxrender-dev \\"
        },
        {
          "line": 13,
          "command": "libglib2.0-0 \\"
        },
        {
          "line": 14,
          "command": "libgtk-3-0 \\"
        },
        {
          "line": 15,
          "command": "libgl1-mesa-glx \\"
        },
        {
          "line": 16,
          "command": "&& rm -rf /var/lib/apt/lists/*"
        },
        {
          "line": 19,
          "command": "WORKDIR /app"
        },
        {
          "line": 22,
          "command": "COPY requirements-gpu.txt ."
        },
        {
          "line": 23,
          "command": "RUN pip3 install --no-cache-dir -r requirements-gpu.txt"
        },
        {
          "line": 26,
          "command": "COPY src/ ./src/"
        },
        {
          "line": 27,
          "command": "COPY config/ ./config/"
        },
        {
          "line": 28,
          "command": "COPY main.py ."
        },
        {
          "line": 31,
          "command": "RUN python3 -c \"from ultralytics import YOLO; YOLO('yolo11n.pt')\" || true"
        },
        {
          "line": 34,
          "command": "ENV PYTHONPATH=/app"
        },
        {
          "line": 35,
          "command": "ENV CUDA_VISIBLE_DEVICES=0"
        },
        {
          "line": 38,
          "command": "EXPOSE 8001"
        },
        {
          "line": 41,
          "command": "HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \\"
        },
        {
          "line": 42,
          "command": "CMD python3 -c \"import torch; print('GPU Available:', torch.cuda.is_available())\" || exit 1"
        },
        {
          "line": 45,
          "command": "CMD [\"python3\", \"-m\", \"uvicorn\", \"src.api.gpu_server:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8001\"]"
        }
      ],
      "errors": [],
      "warnings": []
    }
  },
  "environment_configs": {
    "env_file": {
      "exists": true,
      "required_vars": [
        "YOUTUBE_API_KEY",
        "COUPANG_API_KEY"
      ],
      "missing_vars": [
        "GOOGLE_GEMINI_API_KEY",
        "GOOGLE_SHEETS_CREDENTIALS_PATH"
      ]
    },
    "config_files": {
      "config.py": {
        "path": "config/config.py",
        "exists": true
      },
      "ppl_patterns.json": {
        "path": "config/ppl_patterns.json",
        "exists": true
      }
    },
    "status": "missing_vars"
  },
  "network_configs": {
    "nginx_conf": {
      "exists": true,
      "global_exists": true
    }
  },
  "overall_status": "valid",
  "summary": {
    "total_errors": 0,
    "total_warnings": 0,
    "compose_files_checked": 3,
    "dockerfiles_checked": 2,
    "deployment_readiness": "ready"
  }
}