{
  "name": "Notification Priority Routing Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "notification-router",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "notification-webhook",
      "name": "Notification Router Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        300,
        300
      ],
      "webhookId": "notification-router"
    },
    {
      "parameters": {
        "jsCode": "// 알림 우선순위 분류 및 라우팅 로직\nconst notificationData = $json;\n\nconsole.log('알림 라우팅 요청 수신:', notificationData.type);\n\n// 알림 타입별 우선순위 정의\nconst priorityMatrix = {\n  // 시스템 알림\n  'system_error': { priority: 'CRITICAL', channels: ['email', 'slack'], throttle: 0 },\n  'system_warning': { priority: 'HIGH', channels: ['slack'], throttle: 300 }, // 5분\n  'system_info': { priority: 'MEDIUM', channels: ['slack'], throttle: 1800 }, // 30분\n  \n  // 분석 알림\n  'analysis_completed': { priority: 'MEDIUM', channels: ['slack'], throttle: 0 },\n  'analysis_failed': { priority: 'HIGH', channels: ['slack', 'email'], throttle: 0 },\n  'high_score_candidate': { priority: 'HIGH', channels: ['slack'], throttle: 0 },\n  \n  // 채널 관리 알림\n  'channel_sync': { priority: 'LOW', channels: ['slack'], throttle: 3600 }, // 1시간\n  'channel_error': { priority: 'MEDIUM', channels: ['slack'], throttle: 600 }, // 10분\n  \n  // 수익화 알림\n  'monetization_opportunity': { priority: 'HIGH', channels: ['slack'], throttle: 0 },\n  'coupang_api_error': { priority: 'HIGH', channels: ['slack', 'email'], throttle: 0 },\n  \n  // 일반 운영 알림\n  'daily_report': { priority: 'LOW', channels: ['slack', 'email'], throttle: 86400 }, // 24시간\n  'weekly_summary': { priority: 'LOW', channels: ['email'], throttle: 604800 }, // 7일\n  \n  // 사용자 액션 알림\n  'user_approval': { priority: 'MEDIUM', channels: ['slack'], throttle: 0 },\n  'user_rejection': { priority: 'LOW', channels: [], throttle: 0 } // 로그만\n};\n\n// 기본 설정\nconst defaultPriority = { priority: 'MEDIUM', channels: ['slack'], throttle: 0 };\n\n// 알림 타입에 따른 설정 가져오기\nconst notificationType = notificationData.type || 'unknown';\nconst config = priorityMatrix[notificationType] || defaultPriority;\n\n// 내용 기반 우선순위 조정\nfunction adjustPriorityByContent(baseConfig, data) {\n  const content = (data.message || data.title || '').toLowerCase();\n  const urgentKeywords = ['critical', 'fatal', 'crash', 'down', 'failure', '치명적', '심각', '중단'];\n  const importantKeywords = ['error', 'warning', 'timeout', '에러', '경고', '실패'];\n  \n  if (urgentKeywords.some(keyword => content.includes(keyword))) {\n    return {\n      ...baseConfig,\n      priority: 'CRITICAL',\n      channels: ['email', 'slack']\n    };\n  } else if (importantKeywords.some(keyword => content.includes(keyword))) {\n    return {\n      ...baseConfig,\n      priority: baseConfig.priority === 'LOW' ? 'MEDIUM' : baseConfig.priority\n    };\n  }\n  \n  return baseConfig;\n}\n\nconst finalConfig = adjustPriorityByContent(config, notificationData);\n\n// 스로틀링 체크를 위한 키 생성\nconst throttleKey = `${notificationType}_${notificationData.component || 'global'}`;\n\n// 알림 메타데이터 구성\nconst routingData = {\n  // 원본 데이터\n  originalData: notificationData,\n  \n  // 라우팅 정보\n  notificationType: notificationType,\n  priority: finalConfig.priority,\n  channels: finalConfig.channels,\n  throttleKey: throttleKey,\n  throttleSeconds: finalConfig.throttle,\n  \n  // 타임스탬프\n  receivedAt: new Date().toISOString(),\n  \n  // 메타데이터\n  metadata: {\n    source: notificationData.source || 'unknown',\n    component: notificationData.component || 'system',\n    environment: notificationData.environment || 'production',\n    userId: notificationData.user_id || null,\n    requestId: notificationData.request_id || null\n  },\n  \n  // 우선순위별 처리 방식\n  processingConfig: {\n    immediate: finalConfig.priority === 'CRITICAL',\n    requiresEmail: finalConfig.channels.includes('email'),\n    requiresSlack: finalConfig.channels.includes('slack'),\n    canThrottle: finalConfig.throttle > 0\n  }\n};\n\nconsole.log(`알림 라우팅 완료: ${notificationType} -> ${finalConfig.priority} (${finalConfig.channels.join(', ')})`);\n\nreturn [{ json: routingData }];"
      },
      "id": "classify-notification",
      "name": "Classify Notification Priority",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "can-throttle",
              "leftValue": "={{ $json.processingConfig.canThrottle }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-throttling",
      "name": "Check Throttling Required",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "{{ $env.REDIS_ENDPOINT || $env.PYTHON_ANALYSIS_ENDPOINT }}/throttle/check",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $json.throttleKey }}"
            },
            {
              "name": "seconds",
              "value": "={{ $json.throttleSeconds }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.ANALYSIS_API_KEY }}"
            }
          ]
        },
        "options": {
          "timeout": 5000
        }
      },
      "id": "check-throttle-status",
      "name": "Check Throttle Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// 스로틀링 상태 확인 및 처리 결정\nconst routingData = $('Classify Notification Priority').item.json;\nconst throttleResult = $json;\n\nconst shouldProcess = !throttleResult.is_throttled;\n\nif (shouldProcess) {\n  console.log(`알림 처리 진행: ${routingData.notificationType}`);\n} else {\n  console.log(`알림 스로틀링됨: ${routingData.notificationType} (마지막 발송: ${throttleResult.last_sent})`);\n}\n\nreturn [{\n  json: {\n    ...routingData,\n    shouldProcess: shouldProcess,\n    throttleInfo: throttleResult,\n    decision: shouldProcess ? 'PROCESS' : 'THROTTLED'\n  }\n}];"
      },
      "id": "evaluate-throttle",
      "name": "Evaluate Throttle Decision",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "should-process",
              "leftValue": "={{ $json.shouldProcess }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-should-process",
      "name": "Check Should Process",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1300,
        200
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "needs-email",
              "leftValue": "={{ $json.processingConfig.requiresEmail }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-email-required",
      "name": "Check Email Required",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1500,
        100
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "needs-slack",
              "leftValue": "={{ $json.processingConfig.requiresSlack }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-slack-required",
      "name": "Check Slack Required",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1500,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.N8N_WEBHOOK_BASE_URL }}/webhook/system-error",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "originalData",
              "value": "={{ JSON.stringify($json.originalData) }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.priority }}"
            },
            {
              "name": "routing_source",
              "value": "notification-router"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "trigger-email-workflow",
      "name": "Trigger Email Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1700,
        50
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.N8N_WEBHOOK_BASE_URL }}/webhook/analysis-complete",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "originalData",
              "value": "={{ JSON.stringify($json.originalData) }}"
            },
            {
              "name": "priority",
              "value": "={{ $json.priority }}"
            },
            {
              "name": "routing_source",
              "value": "notification-router"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "trigger-slack-workflow",
      "name": "Trigger Slack Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1700,
        250
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.REDIS_ENDPOINT || $env.PYTHON_ANALYSIS_ENDPOINT }}/throttle/set",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.ANALYSIS_API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "key",
              "value": "={{ $json.throttleKey }}"
            },
            {
              "name": "seconds",
              "value": "={{ $json.throttleSeconds }}"
            },
            {
              "name": "metadata",
              "value": "={{ JSON.stringify($json.metadata) }}"
            }
          ]
        },
        "options": {
          "timeout": 5000
        }
      },
      "id": "update-throttle-status",
      "name": "Update Throttle Status",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1900,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// 즉시 처리 (스로틀링 없음)\nconst routingData = $json;\n\nconsole.log(`즉시 처리: ${routingData.notificationType} (우선순위: ${routingData.priority})`);\n\nreturn [{\n  json: {\n    ...routingData,\n    decision: 'IMMEDIATE_PROCESS',\n    bypassThrottle: true\n  }\n}];"
      },
      "id": "immediate-processing",
      "name": "Immediate Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// 스로틀링된 알림 로깅\nconst routingData = $json;\n\nconsole.log(`알림 스로틀링: ${routingData.notificationType} - ${routingData.throttleInfo?.reason || '빈도 제한'}`);\n\nreturn [{\n  json: {\n    notificationType: routingData.notificationType,\n    decision: 'THROTTLED',\n    reason: '빈도 제한으로 인한 스킵',\n    lastSent: routingData.throttleInfo?.last_sent,\n    nextAllowed: routingData.throttleInfo?.next_allowed,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-throttled-notification",
      "name": "Log Throttled Notification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1500,
        500
      ]
    },
    {
      "parameters": {
        "jsCode": "// 알림 라우팅 완료 로깅\nconst routingData = $('Check Should Process').item.json;\nconst emailResult = $('Trigger Email Workflow').item?.json || null;\nconst slackResult = $('Trigger Slack Workflow').item?.json || null;\n\nconst summary = {\n  notificationType: routingData.notificationType,\n  priority: routingData.priority,\n  channelsTriggered: {\n    email: !!emailResult,\n    slack: !!slackResult\n  },\n  processedAt: new Date().toISOString(),\n  throttleUpdated: true\n};\n\nconsole.log(`알림 라우팅 완료: ${JSON.stringify(summary)}`);\n\nreturn [{ json: summary }];"
      },
      "id": "log-routing-completion",
      "name": "Log Routing Completion",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2100,
        200
      ]
    }
  ],
  "connections": {
    "Notification Router Webhook": {
      "main": [
        [
          {
            "node": "Classify Notification Priority",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Classify Notification Priority": {
      "main": [
        [
          {
            "node": "Check Throttling Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Throttling Required": {
      "main": [
        [
          {
            "node": "Check Throttle Status",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Immediate Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Throttle Status": {
      "main": [
        [
          {
            "node": "Evaluate Throttle Decision",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Evaluate Throttle Decision": {
      "main": [
        [
          {
            "node": "Check Should Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Should Process": {
      "main": [
        [
          {
            "node": "Check Email Required",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Slack Required",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Throttled Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Email Required": {
      "main": [
        [
          {
            "node": "Trigger Email Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Slack Required": {
      "main": [
        [
          {
            "node": "Trigger Slack Workflow",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Email Workflow": {
      "main": [
        [
          {
            "node": "Update Throttle Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Trigger Slack Workflow": {
      "main": [
        [
          {
            "node": "Update Throttle Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Throttle Status": {
      "main": [
        [
          {
            "node": "Log Routing Completion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Immediate Processing": {
      "main": [
        [
          {
            "node": "Check Email Required",
            "type": "main",
            "index": 0
          },
          {
            "node": "Check Slack Required",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-23T21:56:00.000Z",
  "updatedAt": "2025-06-23T21:56:00.000Z",
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "error-workflow"
    }
  },
  "staticData": {},
  "tags": ["notification", "routing", "priority", "throttling"]
}