{
  "name": "Google Sheets Real-time Sync Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sheets-webhook",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "sheets-webhook",
      "name": "Google Sheets Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        300,
        300
      ],
      "webhookId": "google-sheets-changes"
    },
    {
      "parameters": {
        "jsCode": "// Google Sheets Webhook 데이터 파싱\nconst webhookData = $json;\n\nconsole.log('Google Sheets 변경사항 감지:', webhookData);\n\n// Webhook 데이터 구조 파싱\nconst changeData = {\n  eventType: webhookData.eventType || 'unknown',\n  spreadsheetId: webhookData.spreadsheetId,\n  sheetId: webhookData.sheetId,\n  range: webhookData.range,\n  changeType: webhookData.changeType || 'edit',\n  timestamp: new Date().toISOString(),\n  rawData: webhookData\n};\n\n// 채널 목록 시트 변경인지 확인\nconst isChannelListChange = changeData.spreadsheetId === $env.GOOGLE_SHEETS_CHANNEL_LIST_ID;\n\nreturn [{\n  json: {\n    ...changeData,\n    isChannelListChange: isChannelListChange,\n    needsSync: isChannelListChange\n  }\n}];"
      },
      "id": "parse-webhook-data",
      "name": "Parse Webhook Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-channel-list",
              "leftValue": "={{ $json.isChannelListChange }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-channel-list",
      "name": "Check Channel List Change",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "sheet",
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "{{$env.GOOGLE_SHEETS_CHANNEL_LIST_ID}}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "채널목록",
          "mode": "name"
        },
        "options": {
          "range": "A:D",
          "valueRenderMode": "FORMATTED_VALUE"
        }
      },
      "id": "read-updated-channels",
      "name": "Read Updated Channel List",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [
        900,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// 업데이트된 채널 목록 처리 및 변경사항 탐지\nconst channels = [];\nconst inputData = $input.all();\nconst webhookData = $('Parse Webhook Data').item.json;\n\n// 현재 시간\nconst syncTime = new Date().toISOString();\n\n// 첫 번째 행은 헤더이므로 제외\nfor (let i = 1; i < inputData.length; i++) {\n  const row = inputData[i].json;\n  \n  // 채널명, RSS URL, 타입, 연예인 이름 추출\n  if (row.A && row.B) { // 채널명과 RSS URL이 있는 경우만\n    channels.push({\n      channelName: row.A,\n      rssUrl: row.B,\n      channelType: row.C || 'personal',\n      celebrityNames: row.D ? row.D.split(',').map(name => name.trim()) : [],\n      lastUpdated: syncTime\n    });\n  }\n}\n\nconsole.log(`채널 목록 동기화: ${channels.length}개 채널 업데이트됨`);\n\n// 동기화 결과 데이터 구성\nconst syncResult = {\n  syncTime: syncTime,\n  totalChannels: channels.length,\n  changeEvent: webhookData,\n  channels: channels,\n  syncStatus: 'completed'\n};\n\nreturn [{ json: syncResult }];"
      },
      "id": "process-channel-sync",
      "name": "Process Channel Sync",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        200
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.PYTHON_ANALYSIS_ENDPOINT }}/sync-channels",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Authorization",
              "value": "Bearer {{ $env.ANALYSIS_API_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "channels",
              "value": "={{ JSON.stringify($json.channels) }}"
            },
            {
              "name": "sync_time",
              "value": "={{ $json.syncTime }}"
            },
            {
              "name": "total_channels",
              "value": "={{ $json.totalChannels }}"
            }
          ]
        },
        "options": {
          "timeout": 15000
        }
      },
      "id": "update-python-channels",
      "name": "Update Python System Channels",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        1300,
        200
      ]
    },
    {
      "parameters": {
        "channel": "{{ $env.SLACK_CHANNEL }}",
        "text": "📋 채널 목록 자동 동기화 완료\\n\\n📊 동기화 결과:\\n- 총 채널 수: {{ $json.totalChannels }}개\\n- 동기화 시간: {{ $json.syncTime }}\\n- 변경 범위: {{ $('Parse Webhook Data').item.json.range }}\\n\\n✅ Python 시스템과 동기화 완료",
        "otherOptions": {}
      },
      "id": "notify-sync-success",
      "name": "Notify Sync Success",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        1500,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// 채널 목록 변경이 아닌 경우 로깅\nconst webhookData = $json;\n\nconsole.log('비채널 목록 시트 변경사항 감지:', webhookData.spreadsheetId);\n\nreturn [{\n  json: {\n    message: '채널 목록이 아닌 시트 변경사항 감지됨',\n    spreadsheetId: webhookData.spreadsheetId,\n    action: 'ignored',\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "log-other-changes",
      "name": "Log Other Sheet Changes",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        400
      ]
    },
    {
      "parameters": {
        "jsCode": "// 에러 처리 및 로깅\nconst error = $json;\nconst webhookData = $('Parse Webhook Data').item.json;\n\nconsole.error('채널 동기화 실패:', error);\n\nreturn [{\n  json: {\n    error: error.message || '알 수 없는 오류',\n    webhookData: webhookData,\n    errorTime: new Date().toISOString(),\n    status: 'sync_failed'\n  }\n}];"
      },
      "id": "handle-sync-error",
      "name": "Handle Sync Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1300,
        400
      ]
    },
    {
      "parameters": {
        "channel": "{{ $env.SLACK_CHANNEL }}",
        "text": "❌ 채널 목록 동기화 실패\\n\\n💥 에러 내용:\\n{{ $json.error }}\\n\\n⏰ 발생 시간: {{ $json.errorTime }}\\n\\n🔧 운영자 확인이 필요합니다.",
        "otherOptions": {}
      },
      "id": "notify-sync-error",
      "name": "Notify Sync Error",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        1500,
        400
      ]
    }
  ],
  "connections": {
    "Google Sheets Webhook": {
      "main": [
        [
          {
            "node": "Parse Webhook Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Webhook Data": {
      "main": [
        [
          {
            "node": "Check Channel List Change",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Channel List Change": {
      "main": [
        [
          {
            "node": "Read Updated Channel List",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Other Sheet Changes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Updated Channel List": {
      "main": [
        [
          {
            "node": "Process Channel Sync",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Channel Sync": {
      "main": [
        [
          {
            "node": "Update Python System Channels",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Python System Channels": {
      "main": [
        [
          {
            "node": "Notify Sync Success",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Sync Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Sync Error": {
      "main": [
        [
          {
            "node": "Notify Sync Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-23T21:48:00.000Z",
  "updatedAt": "2025-06-23T21:48:00.000Z",
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "error-workflow"
    }
  },
  "staticData": {},
  "tags": ["google-sheets", "sync", "realtime", "channels"]
}