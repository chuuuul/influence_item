{
  "name": "System Monitoring and Health Check",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "*/30 * * * *"
            }
          ]
        }
      },
      "id": "monitoring-trigger",
      "name": "Every 30 Minutes",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        300,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// ÏãúÏä§ÌÖú ÏÉÅÌÉú Ï≤¥ÌÅ¨ Ï¥àÍ∏∞Ìôî\nconst checkTime = new Date().toISOString();\nconst staticData = $getWorkflowStaticData('global');\n\n// Î™®ÎãàÌÑ∞ÎßÅ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî\nif (!staticData.monitoring) {\n  staticData.monitoring = {\n    lastHealthCheck: null,\n    uptime: {\n      startTime: checkTime,\n      totalChecks: 0,\n      successfulChecks: 0\n    },\n    performance: {\n      avgResponseTime: 0,\n      maxResponseTime: 0,\n      minResponseTime: Infinity\n    },\n    alerts: []\n  };\n}\n\nstaticData.monitoring.uptime.totalChecks++;\nstaticData.monitoring.lastHealthCheck = checkTime;\n\nconst monitoringData = {\n  checkTime: checkTime,\n  checkId: `health_${Date.now()}`,\n  services: [\n    {\n      name: 'python_analysis_api',\n      url: `${process.env.PYTHON_ANALYSIS_ENDPOINT}/health`,\n      expected_status: 200,\n      timeout: 10000\n    },\n    {\n      name: 'google_sheets_api',\n      url: 'https://sheets.googleapis.com',\n      expected_status: 200,\n      timeout: 5000\n    }\n  ]\n};\n\nconsole.log(`ÏãúÏä§ÌÖú Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏãúÏûë: ${checkTime}`);\n\nreturn [{ json: monitoringData }];"
      },
      "id": "init-health-check",
      "name": "Initialize Health Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        300
      ]
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "loop-services",
      "name": "Loop Over Services",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        700,
        300
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {
          "timeout": "={{ $json.timeout }}",
          "followRedirect": false,
          "ignoreHttpStatusErrors": true
        }
      },
      "id": "check-service",
      "name": "Check Service Health",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "jsCode": "// ÏÑúÎπÑÏä§ ÏÉÅÌÉú Î∂ÑÏÑù\nconst serviceInfo = $('Loop Over Services').item.json;\nconst response = $json;\nconst checkTime = new Date().toISOString();\n\n// ÏùëÎãµ ÏãúÍ∞Ñ Ï∏°Ï†ï\nconst responseTime = response.headers?.['x-response-time'] || 'unknown';\nconst statusCode = response.statusCode || 0;\n\n// ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÌåêÎã®\nconst isHealthy = statusCode === serviceInfo.expected_status;\nconst status = isHealthy ? 'healthy' : 'unhealthy';\n\n// ÏÑúÎπÑÏä§ Ï≤¥ÌÅ¨ Í≤∞Í≥º\nconst serviceResult = {\n  serviceName: serviceInfo.name,\n  url: serviceInfo.url,\n  status: status,\n  statusCode: statusCode,\n  responseTime: responseTime,\n  checkTime: checkTime,\n  isHealthy: isHealthy,\n  errorMessage: isHealthy ? null : `Expected ${serviceInfo.expected_status}, got ${statusCode}`\n};\n\n// Ï†ïÏ†Å Îç∞Ïù¥ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏\nconst staticData = $getWorkflowStaticData('global');\nif (isHealthy) {\n  staticData.monitoring.uptime.successfulChecks++;\n}\n\n// ÏïåÎ¶ºÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞\nif (!isHealthy) {\n  const alert = {\n    serviceName: serviceInfo.name,\n    status: 'down',\n    timestamp: checkTime,\n    details: serviceResult.errorMessage\n  };\n  \n  staticData.monitoring.alerts.push(alert);\n  \n  // ÏµúÍ∑º 10Í∞ú ÏïåÎ¶ºÎßå Ïú†ÏßÄ\n  if (staticData.monitoring.alerts.length > 10) {\n    staticData.monitoring.alerts = staticData.monitoring.alerts.slice(-10);\n  }\n}\n\nconsole.log(`${serviceInfo.name} ÏÉÅÌÉú: ${status}`);\n\nreturn [{ json: serviceResult }];"
      },
      "id": "analyze-service-status",
      "name": "Analyze Service Status",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1100,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-unhealthy",
              "leftValue": "={{ $json.isHealthy }}",
              "rightValue": false,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-unhealthy",
      "name": "Is Unhealthy?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1300,
        300
      ]
    },
    {
      "parameters": {
        "channel": "{{ $env.SLACK_CHANNEL }}",
        "text": "üî¥ ÏÑúÎπÑÏä§ ÏÉÅÌÉú ÏïåÎ¶º\\n\\n‚ö†Ô∏è ÏÑúÎπÑÏä§: {{ $json.serviceName }}\\nüìä ÏÉÅÌÉú: {{ $json.status }}\\nüîó URL: {{ $json.url }}\\nüìà ÏÉÅÌÉú ÏΩîÎìú: {{ $json.statusCode }}\\n‚è∞ Ï≤¥ÌÅ¨ ÏãúÍ∞Ñ: {{ $json.checkTime }}\\n\\n{{ $json.errorMessage ? '‚ùå  ÏóêÎü¨: ' + $json.errorMessage : '' }}",
        "otherOptions": {}
      },
      "id": "alert-unhealthy-service",
      "name": "Alert Unhealthy Service",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        1500,
        200
      ]
    },
    {
      "parameters": {
        "jsCode": "// Î™®Îì† ÏÑúÎπÑÏä§ Ï≤¥ÌÅ¨ ÏôÑÎ£å ÌõÑ Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±\nconst allResults = $input.all();\nconst checkTime = new Date().toISOString();\nconst staticData = $getWorkflowStaticData('global');\n\n// ÏÑúÎπÑÏä§Î≥Ñ ÏÉÅÌÉú ÏßëÍ≥Ñ\nconst healthyServices = allResults.filter(item => item.json.isHealthy);\nconst unhealthyServices = allResults.filter(item => !item.json.isHealthy);\n\nconst totalServices = allResults.length;\nconst healthyCount = healthyServices.length;\nconst unhealthyCount = unhealthyServices.length;\nconst healthPercentage = totalServices > 0 ? (healthyCount / totalServices * 100).toFixed(1) : 100;\n\n// Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌåêÎã®\nlet systemStatus = 'healthy';\nif (unhealthyCount > 0) {\n  systemStatus = unhealthyCount === totalServices ? 'critical' : 'degraded';\n}\n\n// Í∞ÄÎèôÎ•† Í≥ÑÏÇ∞\nconst uptime = staticData.monitoring.uptime;\nconst uptimePercentage = uptime.totalChecks > 0 ? \n  (uptime.successfulChecks / uptime.totalChecks * 100).toFixed(2) : 100;\n\n// Ï¢ÖÌï© Î¶¨Ìè¨Ìä∏\nconst healthReport = {\n  timestamp: checkTime,\n  systemStatus: systemStatus,\n  summary: {\n    totalServices: totalServices,\n    healthyServices: healthyCount,\n    unhealthyServices: unhealthyCount,\n    healthPercentage: healthPercentage\n  },\n  uptime: {\n    percentage: uptimePercentage,\n    totalChecks: uptime.totalChecks,\n    successfulChecks: uptime.successfulChecks,\n    startTime: uptime.startTime\n  },\n  services: allResults.map(item => ({\n    name: item.json.serviceName,\n    status: item.json.status,\n    responseTime: item.json.responseTime\n  })),\n  recentAlerts: staticData.monitoring.alerts.slice(-5) // ÏµúÍ∑º 5Í∞ú ÏïåÎ¶º\n};\n\nconsole.log(`ÏãúÏä§ÌÖú Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏôÑÎ£å: ${systemStatus} (${healthPercentage}% Ï†ïÏÉÅ)`);\n\nreturn [{ json: healthReport }];"
      },
      "id": "generate-health-report",
      "name": "Generate Health Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1700,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "is-degraded",
              "leftValue": "={{ $json.systemStatus }}",
              "rightValue": "healthy",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-system-status",
      "name": "System Issues?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1900,
        300
      ]
    },
    {
      "parameters": {
        "channel": "{{ $env.SLACK_CHANNEL }}",
        "text": "üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú Î¶¨Ìè¨Ìä∏\\n\\nüîπ Ï†ÑÏ≤¥ ÏÉÅÌÉú: {{ $json.systemStatus === 'healthy' ? '‚úÖ Ï†ïÏÉÅ' : $json.systemStatus === 'degraded' ? '‚ö†Ô∏è ÏÑ±Îä• Ï†ÄÌïò' : 'üî¥ Ïã¨Í∞Å' }}\\nüîπ ÏÑúÎπÑÏä§ Ï†ïÏÉÅÎ•†: {{ $json.summary.healthPercentage }}% ({{ $json.summary.healthyServices }}/{{ $json.summary.totalServices }})\\nüîπ ÏãúÏä§ÌÖú Í∞ÄÎèôÎ•†: {{ $json.uptime.percentage }}%\\n\\nüìà ÏÑúÎπÑÏä§Î≥Ñ ÏÉÅÌÉú:\\n{{ $json.services.map(s => `- ${s.name}: ${s.status === 'healthy' ? '‚úÖ' : '‚ùå'} ${s.status}`).join('\\n') }}\\n\\n‚è∞ Ï≤¥ÌÅ¨ ÏãúÍ∞Ñ: {{ $json.timestamp }}",
        "otherOptions": {}
      },
      "id": "send-system-alert",
      "name": "Send System Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        2100,
        200
      ]
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "cronExpression": "0 21 * * *"
            }
          ]
        }
      },
      "id": "daily-report-trigger",
      "name": "Daily Report (9PM)",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        300,
        600
      ]
    },
    {
      "parameters": {
        "jsCode": "// ÏùºÏùº Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±\nconst staticData = $getWorkflowStaticData('global');\nconst reportTime = new Date().toISOString();\nconst today = new Date().toDateString();\n\n// Ïò§ÎäòÏùò ÌÜµÍ≥Ñ Í≥ÑÏÇ∞\nconst monitoring = staticData.monitoring || {};\nconst errorStats = staticData.errorStats || {};\n\n// Í∞ÄÎèôÎ•† Ï†ïÎ≥¥\nconst uptime = monitoring.uptime || { totalChecks: 0, successfulChecks: 0 };\nconst uptimePercentage = uptime.totalChecks > 0 ? \n  (uptime.successfulChecks / uptime.totalChecks * 100).toFixed(2) : 100;\n\n// ÏóêÎü¨ ÌÜµÍ≥Ñ\nconst totalErrors = errorStats.totalErrors || 0;\nconst errorsByCategory = errorStats.errorsByCategory || {};\nconst errorsBySeverity = errorStats.errorsBySeverity || {};\n\n// ÏùºÏùº Î¶¨Ìè¨Ìä∏ Îç∞Ïù¥ÌÑ∞ Íµ¨ÏÑ±\nconst dailyReport = {\n  date: today,\n  reportTime: reportTime,\n  systemHealth: {\n    uptimePercentage: uptimePercentage,\n    totalHealthChecks: uptime.totalChecks,\n    successfulChecks: uptime.successfulChecks,\n    failedChecks: uptime.totalChecks - uptime.successfulChecks\n  },\n  errorSummary: {\n    totalErrors: totalErrors,\n    errorsByCategory: errorsByCategory,\n    errorsBySeverity: errorsBySeverity\n  },\n  alerts: monitoring.alerts || [],\n  recommendations: generateRecommendations(uptimePercentage, totalErrors, errorsBySeverity)\n};\n\nfunction generateRecommendations(uptime, errors, severityBreakdown) {\n  const recommendations = [];\n  \n  if (uptime < 95) {\n    recommendations.push('ÏãúÏä§ÌÖú Í∞ÄÎèôÎ•†Ïù¥ 95% ÎØ∏ÎßåÏûÖÎãàÎã§. Ïù∏ÌîÑÎùº ÏïàÏ†ïÏÑ±ÏùÑ Ï†êÍ≤ÄÌïòÏÑ∏Ïöî.');\n  }\n  \n  if (errors > 10) {\n    recommendations.push('ÏùºÏùº ÏóêÎü¨ Î∞úÏÉùÏù¥ 10ÌöåÎ•º Ï¥àÍ≥ºÌñàÏäµÎãàÎã§. ÏóêÎü¨ Ìå®ÌÑ¥ÏùÑ Î∂ÑÏÑùÌïòÏÑ∏Ïöî.');\n  }\n  \n  if (severityBreakdown.critical > 0) {\n    recommendations.push('Ïã¨Í∞ÅÌïú ÏóêÎü¨Í∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ï¶âÏãú Ï°∞ÏπòÍ∞Ä ÌïÑÏöîÌï©ÎãàÎã§.');\n  }\n  \n  if (recommendations.length === 0) {\n    recommendations.push('ÏãúÏä§ÌÖúÏù¥ ÏïàÏ†ïÏ†ÅÏúºÎ°ú Ïö¥ÏòÅÎêòÍ≥† ÏûàÏäµÎãàÎã§.');\n  }\n  \n  return recommendations;\n}\n\nconsole.log(`ÏùºÏùº Î¶¨Ìè¨Ìä∏ ÏÉùÏÑ±: ${today}`);\n\nreturn [{ json: dailyReport }];"
      },
      "id": "generate-daily-report",
      "name": "Generate Daily Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        500,
        600
      ]
    },
    {
      "parameters": {
        "channel": "{{ $env.SLACK_CHANNEL }}",
        "text": "üìÖ ÏùºÏùº ÏãúÏä§ÌÖú Î¶¨Ìè¨Ìä∏ ({{ $json.date }})\\n\\nüîπ ÏãúÏä§ÌÖú Í±¥Í∞ïÎèÑ:\\n- Í∞ÄÎèôÎ•†: {{ $json.systemHealth.uptimePercentage }}%\\n- Ìó¨Ïä§Ï≤¥ÌÅ¨: {{ $json.systemHealth.successfulChecks }}/{{ $json.systemHealth.totalHealthChecks }}\\n- Ïã§Ìå®: {{ $json.systemHealth.failedChecks }}Ìöå\\n\\nüîπ ÏóêÎü¨ ÌòÑÌô©:\\n- Ï¥ù ÏóêÎü¨: {{ $json.errorSummary.totalErrors }}Ìöå\\n{{ Object.entries($json.errorSummary.errorsBySeverity).map(([severity, count]) => `- ${severity}: ${count}Ìöå`).join('\\n') }}\\n\\nüîπ Ï£ºÏöî Ïπ¥ÌÖåÍ≥†Î¶¨:\\n{{ Object.entries($json.errorSummary.errorsByCategory).map(([category, count]) => `- ${category}: ${count}Ìöå`).join('\\n') }}\\n\\nüí° Í∂åÏû•ÏÇ¨Ìï≠:\\n{{ $json.recommendations.map(rec => `- ${rec}`).join('\\n') }}\\n\\n‚è∞ Î¶¨Ìè¨Ìä∏ ÏãúÍ∞Ñ: {{ $json.reportTime }}",
        "otherOptions": {}
      },
      "id": "send-daily-report",
      "name": "Send Daily Report",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.1,
      "position": [
        700,
        600
      ]
    }
  ],
  "connections": {
    "Every 30 Minutes": {
      "main": [
        [
          {
            "node": "Initialize Health Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Health Check": {
      "main": [
        [
          {
            "node": "Loop Over Services",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Services": {
      "main": [
        [
          {
            "node": "Check Service Health",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generate Health Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Service Health": {
      "main": [
        [
          {
            "node": "Analyze Service Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Service Status": {
      "main": [
        [
          {
            "node": "Is Unhealthy?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Unhealthy?": {
      "main": [
        [
          {
            "node": "Alert Unhealthy Service",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Loop Over Services",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Alert Unhealthy Service": {
      "main": [
        [
          {
            "node": "Loop Over Services",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Health Report": {
      "main": [
        [
          {
            "node": "System Issues?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "System Issues?": {
      "main": [
        [
          {
            "node": "Send System Alert",
            "type": "main",
            "index": 0
          }
        ],
        []
      ]
    },
    "Daily Report (9PM)": {
      "main": [
        [
          {
            "node": "Generate Daily Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Daily Report": {
      "main": [
        [
          {
            "node": "Send Daily Report",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-06-23T21:45:00.000Z",
  "updatedAt": "2025-06-23T21:45:00.000Z",
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": {},
  "tags": ["monitoring", "health-check", "daily-report"]
}