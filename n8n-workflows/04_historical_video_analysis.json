{
  "name": "04. Historical Video Analysis",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "trigger-historical-analysis",
        "options": {
          "noResponseBody": false
        }
      },
      "id": "historical-trigger",
      "name": "Historical Analysis Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [300, 300],
      "webhookId": "historical-analysis-trigger"
    },
    {
      "parameters": {
        "jsCode": "// 과거 영상 분석 파라미터 설정\nconst triggerData = $input.all()[0].json;\n\n// 필수 파라미터 검증\nif (!triggerData.channel_id && !triggerData.channel_url) {\n  throw new Error('channel_id or channel_url is required');\n}\n\n// 분석 설정\nconst analysisParams = {\n  channel_id: triggerData.channel_id,\n  channel_url: triggerData.channel_url,\n  channel_name: triggerData.channel_name || '',\n  celebrity_name: triggerData.celebrity_name || '',\n  \n  // 분석 기간 설정\n  days_back: triggerData.days_back || 30,\n  max_videos: triggerData.max_videos || 20,\n  start_date: triggerData.start_date || null,\n  end_date: triggerData.end_date || null,\n  \n  // 필터링 옵션\n  exclude_shorts: triggerData.exclude_shorts !== false, // 기본값: true (PRD 요구사항)\n  min_duration: triggerData.min_duration || 60, // 최소 1분\n  \n  // 세션 정보\n  session_id: `historical_${Date.now()}`,\n  start_time: new Date().toISOString(),\n  \n  // 분석 우선순위\n  priority: triggerData.priority || 'normal',\n  batch_size: triggerData.batch_size || 5 // 동시 분석할 영상 수\n};\n\nconsole.log('과거 영상 분석 시작:', analysisParams);\n\nreturn [{ json: analysisParams }];"
      },
      "id": "setup-historical-params",
      "name": "Setup Historical Analysis Parameters",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.CHANNEL_DISCOVERY_API_URL || 'http://localhost:5001' }}/scrape/channel-videos",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "channel_id",
              "value": "={{ $json.channel_id }}"
            },
            {
              "name": "channel_url",
              "value": "={{ $json.channel_url }}"
            },
            {
              "name": "days_back",
              "value": "={{ $json.days_back }}"
            },
            {
              "name": "max_videos",
              "value": "={{ $json.max_videos }}"
            },
            {
              "name": "exclude_shorts",
              "value": "={{ $json.exclude_shorts }}"
            },
            {
              "name": "min_duration",
              "value": "={{ $json.min_duration }}"
            },
            {
              "name": "session_id",
              "value": "={{ $json.session_id }}"
            }
          ]
        },
        "options": {
          "timeout": 300000
        }
      },
      "id": "scrape-channel-videos",
      "name": "Scrape Channel Videos (Playwright)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [700, 300]
    },
    {
      "parameters": {
        "jsCode": "// 스크래핑 결과 처리 및 분석 대상 선정\nconst scrapeResult = $json;\nconst setupData = $('Setup Historical Analysis Parameters').item.json;\n\n// 스크래핑된 영상 목록\nconst videos = scrapeResult.videos || [];\nconst totalVideos = videos.length;\n\n// 분석할 영상들 필터링 및 우선순위 정렬\nconst analysisTargets = videos\n  .filter(video => {\n    // 기본 필터링\n    if (!video.video_id || !video.title) return false;\n    \n    // 쇼츠 제외 (PRD 요구사항)\n    if (setupData.exclude_shorts) {\n      const isShorts = video.title.toLowerCase().includes('#shorts') ||\n                      video.title.toLowerCase().includes('shorts') ||\n                      video.title.includes('🩳') ||\n                      (video.duration && video.duration < 60);\n      if (isShorts) return false;\n    }\n    \n    // 최소 길이 체크\n    if (video.duration && video.duration < setupData.min_duration) {\n      return false;\n    }\n    \n    return true;\n  })\n  .sort((a, b) => {\n    // 최신 영상 우선, 조회수 높은 순으로 정렬\n    const dateA = new Date(a.upload_date || 0);\n    const dateB = new Date(b.upload_date || 0);\n    if (dateA.getTime() !== dateB.getTime()) {\n      return dateB.getTime() - dateA.getTime();\n    }\n    return (b.view_count || 0) - (a.view_count || 0);\n  })\n  .slice(0, setupData.max_videos); // 최대 개수 제한\n\n// 배치 처리용 그룹 생성\nconst batches = [];\nfor (let i = 0; i < analysisTargets.length; i += setupData.batch_size) {\n  batches.push(analysisTargets.slice(i, i + setupData.batch_size));\n}\n\nconst result = {\n  session_id: setupData.session_id,\n  channel_info: {\n    channel_id: setupData.channel_id,\n    channel_name: setupData.channel_name,\n    celebrity_name: setupData.celebrity_name\n  },\n  scrape_stats: {\n    total_found: totalVideos,\n    after_filtering: analysisTargets.length,\n    excluded_shorts: totalVideos - videos.filter(v => !v.title.toLowerCase().includes('shorts')).length,\n    batch_count: batches.length\n  },\n  analysis_targets: analysisTargets,\n  batches: batches,\n  start_time: setupData.start_time,\n  scrape_completed_at: new Date().toISOString()\n};\n\nconsole.log(`채널 스크래핑 완료: ${totalVideos}개 발견, ${analysisTargets.length}개 분석 대상 선정`);\n\nreturn [{ json: result }];"
      },
      "id": "process-scrape-results",
      "name": "Process Scrape Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-videos",
              "leftValue": "={{ $json.analysis_targets && $json.analysis_targets.length }}",
              "rightValue": "0",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-analysis-targets",
      "name": "Check If Videos to Analyze",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "jsCode": "// 배치별 분석 요청 준비\nconst data = $json;\nconst batches = data.batches || [];\nconst results = [];\n\n// 각 배치를 분석 요청으로 변환\nfor (let i = 0; i < batches.length; i++) {\n  const batch = batches[i];\n  \n  for (const video of batch) {\n    results.push({\n      video_url: `https://www.youtube.com/watch?v=${video.video_id}`,\n      video_id: video.video_id,\n      video_title: video.title,\n      video_duration: video.duration,\n      upload_date: video.upload_date,\n      view_count: video.view_count,\n      channel_info: data.channel_info,\n      session_id: data.session_id,\n      batch_index: i,\n      priority: 'batch',\n      analysis_type: 'full'\n    });\n  }\n}\n\nconsole.log(`${results.length}개 영상 분석 요청 준비`);\n\nreturn results.map(item => ({ json: item }));"
      },
      "id": "prepare-batch-analysis",
      "name": "Prepare Batch Analysis Requests",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1300, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.CHANNEL_DISCOVERY_API_URL || 'http://localhost:5001' }}/analyze/video",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "video_url",
              "value": "={{ $json.video_url }}"
            },
            {
              "name": "video_id",
              "value": "={{ $json.video_id }}"
            },
            {
              "name": "channel_info",
              "value": "={{ JSON.stringify($json.channel_info) }}"
            },
            {
              "name": "priority",
              "value": "{{ $json.priority }}"
            },
            {
              "name": "analysis_type",
              "value": "{{ $json.analysis_type }}"
            },
            {
              "name": "session_id",
              "value": "={{ $json.session_id }}"
            },
            {
              "name": "metadata",
              "value": "={{ JSON.stringify({batch_index: $json.batch_index, video_title: $json.video_title, upload_date: $json.upload_date, view_count: $json.view_count}) }}"
            }
          ]
        },
        "options": {
          "timeout": 300000
        }
      },
      "id": "trigger-video-analysis",
      "name": "Trigger Individual Video Analysis",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1500, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.SLACK_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "📹 과거 영상 분석 시작!"
            },
            {
              "name": "blocks",
              "value": "={{ JSON.stringify([{\"type\": \"header\", \"text\": {\"type\": \"plain_text\", \"text\": \"📹 과거 영상 분석 시작!\"}}, {\"type\": \"section\", \"fields\": [{\"type\": \"mrkdwn\", \"text\": \"*채널:*\\n\" + $json.channel_info.channel_name}, {\"type\": \"mrkdwn\", \"text\": \"*연예인:*\\n\" + ($json.channel_info.celebrity_name || 'N/A')}, {\"type\": \"mrkdwn\", \"text\": \"*분석 대상:*\\n\" + $json.analysis_targets.length + \"개 영상\"}, {\"type\": \"mrkdwn\", \"text\": \"*배치 수:*\\n\" + $json.scrape_stats.batch_count + \"개\"}]}, {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"📊 *스크래핑 결과:*\\n• 총 발견: \" + $json.scrape_stats.total_found + \"개\\n• 필터링 후: \" + $json.scrape_stats.after_filtering + \"개\\n• 쇼츠 제외: \" + $json.scrape_stats.excluded_shorts + \"개\"}}, {\"type\": \"context\", \"elements\": [{\"type\": \"mrkdwn\", \"text\": \"시작: \" + new Date().toLocaleString('ko-KR') + \" | 세션: \" + $json.session_id}]}]) }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "notify-batch-start",
      "name": "Notify Batch Analysis Start",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1300, 400]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.SLACK_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "😔 과거 영상 분석 - 분석할 영상 없음"
            },
            {
              "name": "blocks",
              "value": "={{ JSON.stringify([{\"type\": \"header\", \"text\": {\"type\": \"plain_text\", \"text\": \"😔 과거 영상 분석 완료\"}}, {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"*결과:* 분석 조건에 맞는 영상을 찾지 못했습니다.\\n\\n*채널:* \" + $('Setup Historical Analysis Parameters').item.json.channel_name + \"\\n*분석 기간:* \" + $('Setup Historical Analysis Parameters').item.json.days_back + \"일\"}}, {\"type\": \"section\", \"text\": {\"type\": \"mrkdwn\", \"text\": \"💡 *가능한 원인:*\\n• 해당 기간에 업로드된 영상 없음\\n• 모든 영상이 쇼츠거나 너무 짧음\\n• 채널 접근 권한 문제\"}}, {\"type\": \"context\", \"elements\": [{\"type\": \"mrkdwn\", \"text\": \"완료: \" + new Date().toLocaleString('ko-KR') + \" | 세션: \" + $('Setup Historical Analysis Parameters').item.json.session_id}]}]) }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "notify-no-videos",
      "name": "Notify No Videos to Analyze",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1100, 500]
    }
  ],
  "connections": {
    "Historical Analysis Trigger": {
      "main": [
        [
          {
            "node": "Setup Historical Analysis Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setup Historical Analysis Parameters": {
      "main": [
        [
          {
            "node": "Scrape Channel Videos (Playwright)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Scrape Channel Videos (Playwright)": {
      "main": [
        [
          {
            "node": "Process Scrape Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Scrape Results": {
      "main": [
        [
          {
            "node": "Check If Videos to Analyze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If Videos to Analyze": {
      "main": [
        [
          {
            "node": "Prepare Batch Analysis Requests",
            "type": "main",
            "index": 0
          },
          {
            "node": "Notify Batch Analysis Start",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Notify No Videos to Analyze",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Batch Analysis Requests": {
      "main": [
        [
          {
            "node": "Trigger Individual Video Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "createdAt": "2025-06-25T07:00:00.000Z",
  "updatedAt": "2025-06-25T07:00:00.000Z",
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner"
  },
  "staticData": {},
  "tags": []
}