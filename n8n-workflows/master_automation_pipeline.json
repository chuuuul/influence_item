{
  "name": "Master Automation Pipeline - PRD Complete Implementation",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 7 * * *"
            }
          ]
        }
      },
      "id": "daily-master-cron",
      "name": "Daily Master Cron (7 AM)",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [300, 300]
    },
    {
      "parameters": {
        "jsCode": "// 마스터 파이프라인 초기화\nconst pipelineStart = {\n  session_id: `master_${Date.now()}`,\n  start_time: new Date().toISOString(),\n  prd_version: '1.0',\n  pipeline_type: 'complete_automation',\n  steps_completed: [],\n  \n  // PRD 요구사항 추적\n  prd_requirements: {\n    '5.2_orchestration': 'n8n을 지휘자로 사용하여 24/7 자동화',\n    '5.2_pipeline': '매일 7시 Cron → Sheets → RSS → 분석 → Slack',\n    '3.1_ai_pipeline': 'AI 2-Pass 파이프라인 완전 구현'\n  }\n};\n\nconsole.log('🚀 PRD 마스터 자동화 파이프라인 시작:', pipelineStart.session_id);\n\nreturn [{ json: pipelineStart }];"
      },
      "id": "initialize-master-pipeline",
      "name": "Initialize Master Pipeline",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [500, 300]
    },
    {
      "parameters": {
        "authentication": "serviceAccount",
        "resource": "sheet",
        "operation": "read",
        "documentId": {
          "__rl": true,
          "value": "{{ $env.GOOGLE_SHEETS_SPREADSHEET_ID }}",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": "Channel List",
          "mode": "name"
        },
        "options": {
          "range": "A:E"
        }
      },
      "id": "step1-read-channels",
      "name": "Step 1: Read Channel List",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4,
      "position": [700, 300]
    },
    {
      "parameters": {
        "jsCode": "// 채널 목록 처리 및 RSS URL 생성\nconst channelData = $input.all();\nconst masterData = $('Initialize Master Pipeline').item.json;\nconst activeChannels = [];\n\nfor (const row of channelData) {\n  const channelId = row.json.channel_id;\n  const channelName = row.json.channel_name;\n  const status = row.json.status;\n  const channelType = row.json.channel_type;\n  const celebrityName = row.json.celebrity_name;\n  \n  if (status === 'active' && channelId) {\n    activeChannels.push({\n      channel_id: channelId,\n      channel_name: channelName,\n      channel_type: channelType,\n      celebrity_name: celebrityName,\n      rss_url: `https://www.youtube.com/feeds/videos.xml?channel_id=${channelId}`\n    });\n  }\n}\n\nconst result = {\n  ...masterData,\n  steps_completed: ['sheets_read'],\n  active_channels: activeChannels,\n  channels_count: activeChannels.length,\n  next_step: 'rss_collection'\n};\n\nconsole.log(`📋 활성 채널 ${activeChannels.length}개 로드 완료`);\n\nreturn [{ json: result }];"
      },
      "id": "process-channels",
      "name": "Process Channel Data",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.RSS_AUTOMATION_API_URL || 'http://localhost:5002' }}/collect-rss",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "channels",
              "value": "={{ JSON.stringify($json.active_channels) }}"
            },
            {
              "name": "session_id",
              "value": "={{ $json.session_id }}"
            },
            {
              "name": "exclude_shorts",
              "value": "true"
            },
            {
              "name": "days_back",
              "value": "1"
            }
          ]
        },
        "options": {
          "timeout": 60000
        }
      },
      "id": "step2-rss-collection",
      "name": "Step 2: RSS Feed Collection",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1100, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "has-new-videos",
              "leftValue": "={{ $json.new_videos && $json.new_videos.length }}",
              "rightValue": "0",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "check-new-videos",
      "name": "Check If New Videos Found",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1300, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.CHANNEL_DISCOVERY_API_URL || 'http://localhost:5001' }}/analyze/batch",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "videos",
              "value": "={{ JSON.stringify($json.new_videos) }}"
            },
            {
              "name": "session_id",
              "value": "={{ $('Process Channel Data').item.json.session_id }}"
            },
            {
              "name": "analysis_type",
              "value": "full_pipeline"
            },
            {
              "name": "prd_compliant",
              "value": "true"
            }
          ]
        },
        "options": {
          "timeout": 600000
        }
      },
      "id": "step3-ai-analysis",
      "name": "Step 3: AI 2-Pass Analysis Pipeline",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1500, 200]
    },
    {
      "parameters": {
        "jsCode": "// 분석 결과 처리 및 통계 생성\nconst analysisResult = $json;\nconst masterData = $('Process Channel Data').item.json;\n\nconst processedResult = {\n  ...masterData,\n  steps_completed: [...masterData.steps_completed, 'rss_collection', 'ai_analysis'],\n  analysis_result: analysisResult,\n  \n  // 통계 정보\n  statistics: {\n    videos_analyzed: analysisResult.total_videos || 0,\n    products_found: analysisResult.total_products || 0,\n    monetizable_products: analysisResult.monetizable_products || 0,\n    ppl_filtered: analysisResult.ppl_filtered || 0,\n    avg_score: analysisResult.average_score || 0\n  },\n  \n  // PRD 파이프라인 완료 상태\n  pipeline_status: {\n    whisper_analysis: 'completed',\n    gemini_first_pass: 'completed',\n    visual_analysis: 'completed',\n    gemini_second_pass: 'completed',\n    ppl_filtering: 'completed',\n    monetization_check: 'completed',\n    scoring: 'completed'\n  },\n  \n  next_step: 'notification'\n};\n\nconsole.log(`🤖 AI 분석 완료: ${processedResult.statistics.products_found}개 제품, ${processedResult.statistics.monetizable_products}개 수익화 가능`);\n\nreturn [{ json: processedResult }];"
      },
      "id": "process-analysis-results",
      "name": "Process Analysis Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1700, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.SLACK_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "🎉 마스터 자동화 파이프라인 완료!"
            },
            {
              "name": "blocks",
              "value": "={{ JSON.stringify([\n  {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": \"🎉 PRD 마스터 자동화 파이프라인 완료!\"\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"fields\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*실행 시간:*\\n\" + ((new Date() - new Date($json.start_time)) / 1000 / 60).toFixed(1) + \"분\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*처리된 채널:*\\n\" + $json.channels_count + \"개\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*분석된 영상:*\\n\" + $json.statistics.videos_analyzed + \"개\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*발견된 제품:*\\n\" + $json.statistics.products_found + \"개\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*수익화 가능:*\\n\" + $json.statistics.monetizable_products + \"개\"\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"*평균 점수:*\\n\" + $json.statistics.avg_score + \"점\"\n      }\n    ]\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"📋 *PRD 파이프라인 단계:*\\n✅ Google Sheets 채널 읽기\\n✅ RSS 피드 수집\\n✅ Whisper 음성 분석\\n✅ Gemini 1차 탐색\\n✅ 시각 분석 (OCR+Object)\\n✅ Gemini 2차 종합\\n✅ PPL 필터링\\n✅ 쿠팡 수익화 검증\\n✅ 매력도 스코어링\"\n    }\n  },\n  {\n    \"type\": \"divider\"\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"🎯 *다음 단계:* 관리 대시보드에서 후보 검토 및 승인\\n📊 <https://docs.google.com/spreadsheets/d/\" + $env.GOOGLE_SHEETS_SPREADSHEET_ID + \"|Google Sheets에서 결과 확인>\"\n    }\n  },\n  {\n    \"type\": \"context\",\n    \"elements\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"완료 시간: \" + new Date().toLocaleString('ko-KR') + \" | 세션: \" + $json.session_id + \" | 시스템: n8n 마스터 자동화\"\n      }\n    ]\n  }\n]) }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "step4-final-notification",
      "name": "Step 4: Final Success Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1900, 200]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.SLACK_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "😴 일일 수집 완료 - 새로운 영상 없음"
            },
            {
              "name": "blocks",
              "value": "={{ JSON.stringify([\n  {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": \"😴 일일 자동화 완료 - 신규 콘텐츠 없음\"\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"📊 *처리 결과:*\\n• 채널 수: \" + $('Process Channel Data').item.json.channels_count + \"개\\n• RSS 피드 확인: 완료\\n• 신규 영상: 0개\\n\\n💡 지난 24시간 내 새로운 영상이 업로드되지 않았거나, 이미 분석이 완료된 영상들입니다.\"\n    }\n  },\n  {\n    \"type\": \"context\",\n    \"elements\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"완료 시간: \" + new Date().toLocaleString('ko-KR') + \" | 세션: \" + $('Process Channel Data').item.json.session_id + \" | 다음 실행: 내일 오전 7시\"\n      }\n    ]\n  }\n]) }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "no-videos-notification",
      "name": "No New Videos Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1500, 400]
    },
    {
      "parameters": {
        "jsCode": "// 에러 처리 및 복구 시도\nconst error = $input.all()[0];\nconst masterData = $('Process Channel Data').item.json;\n\nconst errorData = {\n  session_id: masterData.session_id,\n  error_time: new Date().toISOString(),\n  error_step: 'pipeline_execution',\n  error_message: error.message || '알 수 없는 오류',\n  error_details: JSON.stringify(error, null, 2),\n  execution_time: ((new Date() - new Date(masterData.start_time)) / 1000).toFixed(1),\n  recovery_attempted: false\n};\n\nconsole.error('마스터 파이프라인 오류:', errorData);\n\nreturn [{ json: errorData }];"
      },
      "id": "handle-pipeline-error",
      "name": "Handle Pipeline Error",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 500]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "{{ $env.SLACK_WEBHOOK_URL }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "🚨 마스터 자동화 파이프라인 오류"
            },
            {
              "name": "blocks",
              "value": "={{ JSON.stringify([\n  {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": \"🚨 마스터 자동화 파이프라인 오류\"\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"*오류 내용:*\\n```\" + $json.error_message + \"```\\n\\n*발생 단계:* \" + $json.error_step + \"\\n*세션 ID:* \" + $json.session_id + \"\\n*발생 시간:* \" + new Date($json.error_time).toLocaleString('ko-KR')\"\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"🔧 *긴급 조치 필요:*\\n• API 서버 상태 확인\\n• 환경변수 설정 검토\\n• 로그 파일 분석\\n• 시스템 재시작 고려\"\n    }\n  },\n  {\n    \"type\": \"context\",\n    \"elements\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": \"우선순위: 높음 | 24/7 자동화 중단됨 | 즉시 확인 필요\"\n      }\n    ]\n  }\n]) }}"
            }
          ]
        },
        "options": {
          "timeout": 10000
        }
      },
      "id": "error-notification",
      "name": "Send Error Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [1100, 500]
    }
  ],
  "connections": {
    "Daily Master Cron (7 AM)": {
      "main": [
        [
          {
            "node": "Initialize Master Pipeline",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Initialize Master Pipeline": {
      "main": [
        [
          {
            "node": "Step 1: Read Channel List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 1: Read Channel List": {
      "main": [
        [
          {
            "node": "Process Channel Data",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Pipeline Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Channel Data": {
      "main": [
        [
          {
            "node": "Step 2: RSS Feed Collection",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 2: RSS Feed Collection": {
      "main": [
        [
          {
            "node": "Check If New Videos Found",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Pipeline Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If New Videos Found": {
      "main": [
        [
          {
            "node": "Step 3: AI 2-Pass Analysis Pipeline",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No New Videos Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 3: AI 2-Pass Analysis Pipeline": {
      "main": [
        [
          {
            "node": "Process Analysis Results",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Pipeline Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Analysis Results": {
      "main": [
        [
          {
            "node": "Step 4: Final Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Pipeline Error": {
      "main": [
        [
          {
            "node": "Send Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "createdAt": "2025-06-25T00:00:00.000Z",
  "updatedAt": "2025-06-25T00:00:00.000Z",
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "error-master-workflow"
    }
  },
  "staticData": {},
  "tags": ["prd", "master", "automation", "production"],
  "meta": {
    "templateCredsSetupCompleted": true,
    "prd_compliant": true,
    "version": "1.0"
  }
}