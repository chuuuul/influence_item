services:
  # 글로벌 로드 밸런서 (nginx)
  global-nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.global.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./geoip:/etc/nginx/geoip:ro
    networks:
      - influence_global_network
    environment:
      - REGION=${REGION:-us-east-1}
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3

  # 지역별 GPU 서버
  gpu-server-region:
    build:
      context: .
      dockerfile: Dockerfile.gpu
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
      replicas: 2
      placement:
        constraints:
          - node.labels.gpu == true
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - PYTHONPATH=/app
      - REGION=${REGION:-us-east-1}
      - GLOBAL_CACHE_ENABLED=true
      - REDIS_CLUSTER_ENABLED=true
    env_file:
      - .env
      - .env.${REGION:-us-east-1}
    ports:
      - "8001:8001"
    volumes:
      - ./temp:/app/temp
      - ./yolo11n.pt:/app/yolo11n.pt:ro
      - gpu_cache_region:/app/cache
    networks:
      - influence_global_network
    healthcheck:
      test: ["CMD", "python3", "-c", "import torch; print('GPU Available:', torch.cuda.is_available())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # 지역별 CPU 서버
  cpu-server-region:
    build:
      context: .
      dockerfile: Dockerfile.cpu
    restart: unless-stopped
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
    environment:
      - PYTHONPATH=/app
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      - GPU_SERVER_URL=http://gpu-server-region:8001
      - REGION=${REGION:-us-east-1}
      - DATABASE_CLUSTER_ENABLED=true
      - REDIS_CLUSTER_ENABLED=true
    env_file:
      - .env
      - .env.${REGION:-us-east-1}
    ports:
      - "8501:8501"
    volumes:
      - ./influence_item.db:/app/influence_item.db
      - ./temp:/app/temp
      - ./screenshots:/app/screenshots
      - db_cluster_region:/app/db_cluster
    networks:
      - influence_global_network
    depends_on:
      - gpu-server-region
      - redis-cluster
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis 클러스터 (지역별 캐시)
  redis-cluster:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data_region:/data
    networks:
      - influence_global_network
    environment:
      - REDIS_CLUSTER_ANNOUNCE_IP=${REDIS_ANNOUNCE_IP:-127.0.0.1}

  # 모니터링 및 메트릭
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data_region:/prometheus
    networks:
      - influence_global_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # 로그 수집
  fluentd:
    image: fluentd:v1.16-1
    restart: unless-stopped
    volumes:
      - ./fluentd.conf:/fluentd/etc/fluent.conf:ro
      - ./logs:/fluentd/logs
    networks:
      - influence_global_network
    environment:
      - REGION=${REGION:-us-east-1}
      - LOG_LEVEL=info

networks:
  influence_global_network:
    driver: overlay
    external: true

volumes:
  gpu_cache_region:
    driver: local
  db_cluster_region:
    driver: local
  redis_data_region:
    driver: local
  prometheus_data_region:
    driver: local